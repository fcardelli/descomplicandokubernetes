****Kubernetes****
###AULA01###

**Componentes:
*Control Plane:
etcd - guarda todo o estado do seu cluster, é como se fosse o cérebro do cluster
kube api server - O unico que conversa com o etcd, é aonde rola toda a comunicação do cluster
kube scheduler - é o controlador do cluster, ele que sabe aonde pode colocar cada container e agendamentos de tarefas
kube controller manager - Controla e gerencia deployments, replicas sets e demais componentes

*Workers:
kubelet - é um agente que roda em todo nó do kubernetes
kubeproxy - todo qualquer nó ou node possui esse componentes, é o proxy do kubernetes

*Portas TCP e UDP dos componentes do Kubernetes:
Kube-ApiServer = TCP 6443
etcd = TCP 2379,2380
Kubelet = TCP 10250
Kube-Scheduler = TCP 10251
Kube-Controller = TCP 10252
NodePort = TCP 30000-32767
Weave Net = 6783-6784 TCP/UDP

*Componentes do dia-a-dia do Kubernetes

Pod - podem conter um ou mais containers que compartilham as mesmas configuraçãos de ip e configuraçãos do mesmo pod
Replica set - é um controller dos pods que é criado juntos com o deployment, sempre que um pod cai é ele que é reponsavel para subir um novo pod para assumir
Deployment - é o controller dos pods, onde é definida todas as informações de quantas replicas um pode deve ter e demais configurações de memoria ram e potencia de núcleo
Service - é reponsável por expor esses pods para fora do nó do cluster

*Instalando cluster Kind no Ubuntu

# For AMD64 / x86_64
[ $(uname -m) = x86_64 ] && curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.26.0/kind-linux-amd64
chmod +x ./kind
sudo mv ./kind /usr/local/bin/kind

*Instalando Docker para poder rodar o Kind

curl -fsSL https://get.docker.com | bash

*Criando cluster inicial com Kind

king create cluster
testando o cluster criado - kubectl get nodes

*Apagando o cluster inicial
kind delete cluster

*Criando cluster com kind multi-nodes

Criar arquivo kind-cluster.yaml e adicionar o seguinte texto:
kind: cluster
apiVersion: king.x-k8s.io/v1alpha4
nodes:
- role: control-plane
- role: worker
- role: worker

após criar o arquivo, realizar o seguinte comando para criar no
kind customizado

king create cluster --config king-cluster.yaml --name giropops

*Iniciando a utilizar o cluster

#Lista todos os pods
kubectl get pods

#Traz todos os pods importantes do kube-system
kubectl get pods -n kube-system

#Traz todos os pods importantes do kube-system com mais detalhes
kubectl get pods -n kube-system -o wide

#Traz todos os pods
kubectl get pods -A

#Traz todos os deployments
kubectl get deployment -A

#Traz todos os services
kubectl get service -A

#Traz todos os replicaset
kubectl get replicaset -A

#Instalando o bash completion no Ubuntu
apt install bash-completion

#Instalando o bash completion no kubectl
kubectl completion --help

## Adicionando o bash completion no kubernetes

source /etc/bash_completion
kubectl completion bash > /root/.kube/completion.bash.inc
printf "
# kubectl shell completion
source '/root/.kube/completion.bash.inc'
" >> /root/.bash_profile
source /root/.bash_profile

** Ou utilize esse exemplo a seguir:
kubectl completion bash | sudo tee /etc/bash_completion.d/kubectl > /dev/null
echo 'alias k=kubectl' >>~/.bashrc
echo 'complete -o default -F __start_kubectl k' >>~/.bashrc

  # Installing bash completion on Linux
  ## If bash-completion is not installed on Linux, install the 'bash-completion' package
  ## via your distribution's package manager.
  ## Load the kubectl completion code for bash into the current shell
  source <(kubectl completion bash)
  ## Write bash completion code to a file and source it from .bash_profile
  kubectl completion bash > ~/.kube/completion.bash.inc
  printf "
  # kubectl shell completion
  source '$HOME/.kube/completion.bash.inc'
  " >> $HOME/.bash_profile
  source $HOME/.bash_profile

##Se não funcionar esse metodo vai
echo '[[ $commands[kubectl] ]] && source <(kubectl completion zsh)' >> ~/.zshrc # add autocomplete permanently to your zsh shell

## Criando nosso primeiro pod
kubectl run giropops --image=nginx --port=80

## Acessando o bash do container
kubectl exec -it giropops -- /bin/bash

## Deletar o Pod
kubectl delete pods giropops

## Criando um service para o pod giropops
kubectl run giropops --image=nginx --port=80
kubectl expose pods giropops

## Adicionando alias no kubectl
vim /root/.bash_profile

Adicionar  na ultima linha:
alias k="kubectl"

## Para testar a criacão de um pod sem ter que cria-lo
kubectl run --image=nginx --port=80 giropops --dry-run=client

## Obter yaml de um pod utilizando o método de dry-run
kubectl run --image=nginx --port=80 giropops --dry-run=client -o yaml > pod.yaml

## Criar um pod a partir de um yaml obtido pelo dry-run
kubectl apply -f pod.yaml

###AULA02###
Desafio que não rolou :(
    Meuprimeirocluster.yaml
    Criar um cluster kubernetes usando kind
    1 control plane
    3 workers
    Deployar o nginx

Definição do pod:
O pod é a menor unidade do Kubernetes
O pod pode conter mais de um container caso seja necessário
Um pod com dois containers se falam por localhost
Dois pods diferentes se comunicam por IP

##Descreve todas as informações do pod 
kubectl describe pods nomedopod

##Pegar as informações do Yaml de um pod
kubectl get pods giropops -o yaml

##Pegar todos os dados de pods de forma ampla
kubectl get pods -o wide

##Atachar em um pod para obter acesso
kubectl attach nomepod -c nomecontainer -ti

##Executar um comando para abrir um terminal no pod
kubectl exec -ti nomedopod /bin/bash

##Executar um pod dry-run(verifica se o pod consegue ser criado, mas não cria o pod)
kubectl run nomedopod --image alpine ou qualquer outra --dry-run=client

##Executar um pod dry-run para e exibir o retorno do pod em yaml para pegar os dados de criação de um pod
kubectl run nomedopod --image alpine ou qualquer outra --dry-run=client -o yaml

## Editando o pod
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: girus
    service: webserver
  name: girus
spec:
  containers:
  - image: nginx
    name: girus
    resources: {}
  dnsPolicy: ClusterFirst
  restartPolicy: Always

##Aplicando um manifesto para criar um pod
kubectl create -f pod.yaml

##Atualizando um manifesto no pod ou criando caso não exista o pod
kubectl apply -f pod.yaml

##Obtendo a descrição de execução do pod
kubectl describe pods nomedopod

##Obtendo o log de um pod
kubectl logs nomedopod

##Obtendo o log de um pod em tempo realizar
kubectl logs nomedopod -f

##Obtendo o log de um pod e especificando um container em especificando
kubectl logs nomedopod -c nomedocontainer

##Pod criado no final da aula 2
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: girus
    service: webserver
  name: girus
spec:
  containers:
  - image: nginx
    name: nginx
    resources: {}
  - image: busybox
    name: busybox
    args:
    - sleep
    - "600"
  dnsPolicy: ClusterFirst
  restartPolicy: Always

##Pod limitado
apiVersion: v1
kind: Pod
metadata:
  labels:
    run: giropops
  name: girus
spec:
  containers:
  - image: ubuntu
    name: ubuntu
    args:
    - sleep
    - "1800"
    resources:
      limits:
        cpu: "0.5"
        memory: "128Mi"
      requests:
        cpu: "0.3"
        memory: "64Mi"
  dnsPolicy: ClusterFirst
  restartPolicy: Always

  ##Criando um pod com volume persistente com emptyDir

  apiVersion: v1
kind: Pod
metadata:
  labels:
    run: giropops
  name: girus
spec:
  containers:
  - image: nginx
    name: webserver
    volumeMounts:
    - mountPath: /giropops
      name: volume-emptydir
    resources:
      limits:
        cpu: "0.5"
        memory: "128Mi"
      requests:
        cpu: "0.3"
        memory: "64Mi"
  dnsPolicy: ClusterFirst
  restartPolicy: Always
  volumes:
  - name: volume-emptydir
    emptyDir:
      sizeLimit: 256Mi

## ** Importante: Caso o pod seja removido o volume vai ser perdido, se o pod for restartado ele vai manter os dados do volume

### DAY 3 ###

##Criando nosso primeiro deployment

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-deployment
  name: nginx-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-deployment
  strategy: {}
  template:
    metadata:
      labels:
        app: nginx-deployment
    spec:
      containers:
      - image: nginx
        name: nginx
        resources:
          limits:
            cpu: 0.5
            memory: 256Mi
          requests:
            cpu: 0.3
            memory: 64Mi


##O Atributo de label é uma especificação muito importante para organização do cluster kubernetes

kubectl get pods -l app=nginx-deployment

##Obter o describe de um deployment
kubectl get deployments.apps nomedodeployment -o yaml > temp.yaml

##Criar um deployment via linha de comando
kubectl create deployment --image nomeimagem --replicas qtdreplicas nomedodeployment

##Deletar uma pod via linha de comando
kubectl delete deployments.apps nomedodeployments

##Deletar um deployment via arquivo
kubectl delete -f nomedodeployment

##Pegar o yaml de criação de um pod utilizanod o dry-run
kubectl create deployment --image nomeimagem --replicas qtdreplicas nomedeployment --dry-run=client -o yaml

##Pegar o yaml de criação de um pod utilizanod o dry-run e jogar para um arquivo
kubectl create deployment --image nomeimagem --replicas qtdreplicas nomedeployment --dry-run=client -o yaml > nomedoarquivo.yaml

##Criar um novo namespace
kubectl create namespace nomedonamespace

##Visualizar namespaces
kubectl get namespaces

## Verificar um rollout ativo de um pod
kubectl rollout status deployment -n giropops nginx-deployment

##Deployment com estrategia de RollingUpdate

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-deployment
  name: nginx-deployment
  namespace: giropops
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-deployment
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  template:
    metadata:
      labels:
        app: nginx-deployment
    spec:
      containers:
      - image: nginx:1.16.0
        name: nginx
        resources:
          limits:
            cpu: 0.5
            memory: 256Mi
          requests:
            cpu: 0.3
            memory: 64Mi

## Fazer um rollback de um update com apply no deployment
kubectl rollout undo deployment -n giropops nginx-deployment

## Definindo estratégia de Recreate

apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: nginx-deployment
  name: nginx-deployment
  namespace: giropops
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx-deployment
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: nginx-deployment
    spec:
      containers:
      - image: nginx:1.16.0
        name: nginx
        resources:
          limits:
            cpu: 0.5
            memory: 256Mi
          requests:
            cpu: 0.3
            memory: 64Mi


## Verificar as Revisions de um Deployment
kubectl rollout history deployment -n giropops nginx-deployment

## Para pausar um Rollout do deployment
kubectl rollout pause deployment -n giropops nginx-deployment

## Para Continuar depois de ter pausado um rollout do deployment
kubectl rollout resume deployment -n giropops nginx-deployment

## Para Continuar depois de ter pausado um rollout do deployment
kubectl rollout restart deployment -n giropops nginx-deployment

## Fazer scale de um deployment
kubectl scale deployment -n giropops --replicas 3
















